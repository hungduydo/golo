{"version":3,"sources":["screens/Market/artboard/index.js","screens/Market/chart/index.js","screens/Market/index.js"],"names":["Artboard","props","point","toFixed","updateDate","Date","toDateString","rotatex","level","Math","ceil","className","numClasses","style","transform","format","MarketChart","width","height","orientation","data","valueData","yPadding","xType","tickValues","keys","indexData","MBINum","substr","split","up","down","numColor","Market","useState","current","setCurrent","close","setClose","mothago","setMothago","weekago","setWeekago","setUpdateDate","fgiCurrent","setfgiCurrent","fgiClose","setFgiClose","fgiMoth","setFgiMoth","fgiWeek","setFgiWeek","fgiUpdate","setFgiUpdate","setindexData","keyData","setkeyData","setvalueData","fgiindexData","setfgiindexData","fgikeyData","setfgikeyData","useEffect","Promise","all","api","post","then","mbiRes","fgiRes","mbiChartRes","fgiChartRes","compValueRes","mbiData","current_date","previous_close","week_ago","month_ago","last_update","fgiData","key","total","length","step","round","mbiChartData","map","it","index","x","getTime","y","push","fgiChartData","Container","Row","Col","md","value","label","date"],"mappings":"4OA2BeA,G,OAxBE,SAACC,GAChB,IAAMC,GAAuB,EAAdD,EAAMC,OAAWC,QAAQ,GACpCC,EAAa,IAAIC,KAAgC,GAA1BJ,EAAMG,WAAa,QAAUE,eAClDC,EAAO,gCAA2C,EAARL,EAAY,IAAnB,IAA5B,QACTM,EAAQC,KAAKC,KAAKR,EAAQ,IAExBS,EAAS,uBADfH,EAAQA,EAAQ,EAAI,EAAIA,GAElBI,EAAU,2BAAuBJ,GACvC,OACE,yBAAKG,UAAWA,GACd,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,YAAYE,MAAO,CAAEC,UAAWP,KAC/C,uBAAGI,UAAWC,GACXV,EACD,0BAAMS,UAAU,YACd,kBAAC,IAAD,CAAQI,OAAO,kBACZX,Q,SCYEY,G,OA5BK,SAACf,GACnB,OACE,yBAAKU,UAAU,iBACb,kBAAC,IAAD,CAAQM,MAAO,KAAMC,OAAQ,IAAKP,UAAU,eAC1C,kBAAC,IAAD,MACA,kBAAC,IAAD,MAEA,kBAAC,IAAD,CAAOQ,YAAY,UACnB,kBAAC,IAAD,CACEC,KAAMnB,EAAMoB,aAIhB,kBAAC,IAAD,CAAQJ,MAAO,KAAMC,OAAQ,IAAKP,UAAU,cAAcW,SAAU,GAAIC,MAAM,QAC5E,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAOC,WAAYvB,EAAMwB,KAAOxB,EAAMwB,KAAO,OAC7C,kBAAC,IAAD,CAAOD,WAAY,CAAC,GAAI,IAAKL,YAAY,UAEzC,kBAAC,IAAD,CAAYR,UAAU,aACpBS,KAAMnB,EAAMyB,gBCjBhBC,EAAS,SAAC1B,GAAW,IAAD,GACJA,EAAMC,MAAQ,IAAI0B,OAAO,EAAG,GAAGC,MAAM,KADjC,mBACjBC,EADiB,KACbC,EADa,KAElBC,EAAQ,sBAAkBvB,KAAKC,KAAU,EAALoB,EAAS,KACnD,OACE,0BAAMnB,UAAWqB,GAAWF,EAAG,+BAAKC,KA4LzBE,UAxLA,WAAM,MAGWC,mBAAS,IAHpB,mBAGZC,EAHY,KAGHC,EAHG,OAIOF,mBAAS,IAJhB,mBAIZG,EAJY,KAILC,EAJK,OAKWJ,mBAAS,IALpB,mBAKZK,EALY,KAKHC,EALG,OAMWN,mBAAS,IANpB,mBAMZO,EANY,KAMHC,EANG,OAOiBR,mBAAS,IAP1B,mBAOZ9B,EAPY,KAOAuC,EAPA,OASiBT,mBAAS,IAT1B,mBASZU,EATY,KASAC,EATA,OAUaX,mBAAS,IAVtB,mBAUZY,EAVY,KAUFC,EAVE,OAWWb,mBAAS,IAXpB,mBAWZc,EAXY,KAWHC,EAXG,OAYWf,mBAAS,IAZpB,mBAYZgB,EAZY,KAYHC,EAZG,OAaejB,mBAAS,IAbxB,mBAaZkB,EAbY,KAaDC,EAbC,OAgBenB,mBAAS,IAhBxB,mBAgBZR,EAhBY,KAgBD4B,GAhBC,QAiBWpB,mBAAS,IAjBpB,qBAiBZqB,GAjBY,MAiBHC,GAjBG,SAkBetB,mBAAS,IAlBxB,qBAkBZb,GAlBY,MAkBDoC,GAlBC,SAoBqBvB,mBAAS,IApB9B,qBAoBZwB,GApBY,MAoBEC,GApBF,SAqBiBzB,mBAAS,IArB1B,qBAqBZ0B,GArBY,MAqBAC,GArBA,SAsBqB3B,mBAAS,IAtB9B,iCA8FnB,OAtEA4B,qBAAU,WAERC,QAAQC,IAAI,CACVC,IAAIC,KAAK,YAAa,CAAE,KAAQ,IAAI7D,OACpC4D,IAAIC,KAAK,YAAa,CAAE,KAAQ,IAAI7D,OACpC4D,IAAIC,KAAK,iBAAkB,CAAE,KAAQ,IAAI7D,KAAK,KAAM,EAAG,KACvD4D,IAAIC,KAAK,iBAAkB,CAAE,KAAQ,IAAI7D,KAAK,KAAM,EAAG,KACvD4D,IAAIC,KAAK,mBAAoB,CAAE,KAAQ,IAAI7D,KAAK,KAAM,EAAG,OACxD8D,MAAK,YAA+D,IAAD,mBAA5DC,EAA4D,KAApDC,EAAoD,KAA5CC,EAA4C,KAA/BC,EAA+B,KAAlBC,EAAkB,KAClE,GAAIJ,EAAQ,CACV,IAAMK,EAAUL,EAAOhD,KAAKA,KAC5BgB,EAAWqC,EAAQC,cACnBpC,EAASmC,EAAQE,gBACjBjC,EAAW+B,EAAQG,UACnBpC,EAAWiC,EAAQI,WACnBlC,EAAc8B,EAAQK,aAEtB,IAAMC,EAAUV,EAAOjD,KAAKA,KAC5ByB,EAAckC,EAAQL,cACtB3B,EAAYgC,EAAQJ,gBACpBxB,EAAW4B,EAAQH,UACnB3B,EAAW8B,EAAQF,WACnBxB,EAAa0B,EAAQD,aAIvB,GAAIR,GAAeA,EAAYlD,MAAQkD,EAAYlD,KAAKA,KAAM,CAC5D,IAAI4D,EAAM,GACJC,EAASX,EAAYlD,KAAKA,KAAK8D,OAC/BC,EAAO1E,KAAK2E,MAAMH,EAAM,GAC1BI,EAAef,EAAYlD,KAAKA,KAAKkE,KAAI,SAACC,EAAIC,GAChD,IAAMC,EAAI,IAAIpF,KAAa,IAARkF,EAAG,IAAWG,UAC3BC,EAAU,EAANJ,EAAG,GAIb,OAHIC,EAAQL,GAAQ,GAClBH,EAAIY,KAAKH,GAEJ,CAAEA,IAAGE,QAEdrC,GAAa+B,GACb7B,GAAWwB,GAGb,GAAIT,GAAeA,EAAYnD,MAAQmD,EAAYnD,KAAKA,KAAM,CAC5D,IAAI4D,EAAM,GACJC,EAASV,EAAYnD,KAAKA,KAAK8D,OAC/BC,EAAO1E,KAAK2E,MAAMH,EAAM,GAC1BY,EAAetB,EAAYnD,KAAKA,KAAKkE,KAAI,SAACC,EAAIC,GAChD,IAAMC,EAAI,IAAIpF,KAAa,IAARkF,EAAG,IAAWG,UAC3BC,EAAU,EAANJ,EAAG,GAIb,OAHIC,EAAQL,GAAQ,GAClBH,EAAIY,KAAKH,GAEJ,CAAEA,IAAGE,QAEdhC,GAAgBkC,GAChBhC,GAAcmB,GAGhB,GAAIR,GAAgBA,EAAapD,MAAQoD,EAAapD,KAAKA,KAAM,CAC/D,IAAIC,EAAYmD,EAAapD,KAAKA,KAAKkE,KAAI,SAACC,EAAIC,GAG9C,MAAO,CAAEC,EAFS,IAARF,EAAG,GAEDI,EADI,EAANJ,EAAG,OAIf9B,GAAapC,SAGlB,CArES,IAuEL,kBAACyE,EAAA,EAAD,CAAWnF,UAAU,eAC1B,kBAACoF,EAAA,EAAD,CAAKpF,UAAU,QACb,kBAACqF,EAAA,EAAD,CAAKC,GAAG,IAAItF,UAAU,YACpB,uBAAGA,UAAU,aAAb,uBACA,uBAAGA,UAAU,SAAb,8BACA,uBAAGA,UAAU,eAAb,2CACA,uBAAGA,UAAU,cACX,kBAAC,EAAD,CAAQT,MAAOiC,EAAQ+D,QACvB,0BAAMvF,UAAU,cAAhB,QAAkC,2BAAIwB,EAAQgE,SAEhD,yBAAKxF,UAAU,yBACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,CAAQT,MAAOmC,EAAM6D,QACrB,0BAAMvF,UAAU,cAAhB,mBAA6C,2BAAI0B,EAAM8D,SAEzD,yBAAKxF,UAAU,YACb,kBAAC,EAAD,CAAQT,MAAOuC,EAAQyD,QACvB,0BAAMvF,UAAU,cAAhB,eAAyC,2BAAI8B,EAAQ0D,SAEvD,yBAAKxF,UAAU,YACb,kBAAC,EAAD,CAAQT,MAAOqC,EAAQ2D,QACvB,0BAAMvF,UAAU,cAAhB,eAAyC,2BAAI4B,EAAQ4D,UAGzD,uBAAGxF,UAAU,eAAb,oBACE,kBAAC,IAAD,CAAQI,OAAO,oBACZX,KAIP,kBAAC4F,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,EAAD,CAAU/F,MAAOiC,EAAQ+D,MAAO9F,WAAY+B,EAAQiE,SAIxD,kBAACL,EAAA,EAAD,CAAKpF,UAAU,SACb,uBAAGA,UAAU,eAAb,0CACA,uBAAGA,UAAU,cACX,0BAAMA,UAAU,mBAAhB,WACA,0BAAMA,UAAU,cAAhB,yBAEF,kBAAC,EAAD,CAAae,UAAWA,EAAWL,UAAWA,GAAWI,KAAM8B,KAC/D,uBAAG5C,UAAU,gBAAb,uCAGF,kBAACoF,EAAA,EAAD,CAAKpF,UAAU,QACb,kBAACqF,EAAA,EAAD,CAAKC,GAAG,IAAItF,UAAU,YACpB,uBAAGA,UAAU,aAAb,uBACA,uBAAGA,UAAU,SAAb,4BACA,uBAAGA,UAAU,eAAb,2CACA,uBAAGA,UAAU,cACX,kBAAC,EAAD,CAAQT,MAAO0C,EAAWsD,QAC1B,0BAAMvF,UAAU,cAAhB,QAAkC,2BAAIiC,EAAWuD,SAEnD,yBAAKxF,UAAU,yBACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,CAAQT,MAAO4C,EAASoD,QACxB,0BAAMvF,UAAU,cAAhB,mBAA6C,2BAAImC,EAASqD,SAE5D,yBAAKxF,UAAU,YACb,kBAAC,EAAD,CAAQT,MAAOgD,EAAQgD,QACvB,0BAAMvF,UAAU,cAAhB,eAAyC,2BAAIuC,EAAQiD,SAEvD,yBAAKxF,UAAU,YACb,kBAAC,EAAD,CAAQT,MAAO8C,EAAQkD,QACvB,0BAAMvF,UAAU,cAAhB,eAAyC,2BAAIqC,EAAQmD,UAGzD,uBAAGxF,UAAU,eAAb,oBACE,kBAAC,IAAD,CAAQI,OAAO,oBACZqC,KAIP,kBAAC4C,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,EAAD,CAAU/F,MAAO0C,EAAWsD,MAAO9F,WAAYwC,EAAWwD,SAG9D,kBAACL,EAAA,EAAD,CAAKpF,UAAU,SACb,uBAAGA,UAAU,eAAb,wCACA,uBAAGA,UAAU,cACX,0BAAMA,UAAU,mBAAhB,WACA,0BAAMA,UAAU,cAAhB,uBAEF,kBAAC,EAAD,CAAae,UAAWgC,GAAcjC,KAAMmC,GAAYvC,UAAWA,KACnE,uBAAGV,UAAU,gBAAb","file":"static/js/9.68244d9a.chunk.js","sourcesContent":["import React from 'react';\nimport Moment from 'react-moment';\nimport './artboard.scss';\nconst Artboard = (props) => {\n  const point = (props.point * 1).toFixed(2);\n  let updateDate = new Date((props.updateDate + '000')*1).toDateString();\n  const rotatex = `rotate(272deg) rotate(${232 * (point * 1 / 100)}deg)`;\n  let level = Math.ceil(point / 20);\n  level = level > 5 ? 0 : level;\n  const className = `artboard lock${level}`\n  const numClasses = `artboard-num num-${level}`;\n  return (\n    <div className={className}>\n      <div className=\"active-section\"></div>\n      <div className=\"clockwise\" style={{ transform: rotatex }}></div>\n      <p className={numClasses}>\n        {point}\n        <span className=\"mbi-date\">\n          <Moment format=\"HH:mm D/M/yyyy\">\n            {updateDate}\n          </Moment>\n        </span>\n      </p>\n    </div>\n  )\n}\n\nexport default Artboard;","import React from 'react';\nimport { Hint, HorizontalGridLines, LineSeries, VerticalGridLines, XAxis, XYPlot, YAxis } from \"react-vis\";\nimport './chart.scss';\nconst MarketChart = (props) => {\n  return (\n    <div className=\"combine-chart\">\n      <XYPlot width={1200} height={300} className=\"value-chart\">\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        {/* <XAxis tickValues={[2012, 2013, 2014, 2015, 2016, 2017, 2018]}  hideTicks={false}/> */}\n        <YAxis orientation=\"right\" />\n        <LineSeries\n          data={props.valueData} />\n\n      </XYPlot>\n\n      <XYPlot width={1200} height={200} className=\"index-chart\" yPadding={30} xType=\"time\">\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis tickValues={props.keys ? props.keys : null}/>\n        <YAxis tickValues={[20, 80]} orientation=\"right\" />\n\n        <LineSeries className=\"line-index\"\n          data={props.indexData}/>\n      </XYPlot>\n\n    </div>\n\n  )\n}\n\nexport default MarketChart;","import React, { useEffect, useState } from \"react\";\nimport Moment from 'react-moment';\nimport { Col, Container, Row } from \"reactstrap\";\nimport api from \"../../service/api\";\nimport Artboard from \"./artboard\";\nimport MarketChart from \"./chart\";\nconst MBINum = (props) => {\n  const [up, down] = (props.point + '').substr(0, 5).split('.');\n  const numColor = `mbi-num num-${Math.ceil(up * 1 / 20)}`;\n  return (\n    <span className={numColor}>{up}<i>.{down}</i></span>\n  );\n}\n\nconst Market = () => {\n  // let data = {};\n  // let current, close, mothago, weekago = {};\n  const [current, setCurrent] = useState({});\n  const [close, setClose] = useState({});\n  const [mothago, setMothago] = useState({});\n  const [weekago, setWeekago] = useState({});\n  const [updateDate, setUpdateDate] = useState({});\n\n  const [fgiCurrent, setfgiCurrent] = useState({})\n  const [fgiClose, setFgiClose] = useState({})\n  const [fgiMoth, setFgiMoth] = useState({})\n  const [fgiWeek, setFgiWeek] = useState({})\n  const [fgiUpdate, setFgiUpdate] = useState({})\n\n  // Chart data\n  const [indexData, setindexData] = useState([]);\n  const [keyData, setkeyData] = useState([])\n  const [valueData, setvalueData] = useState([]);\n\n  const [fgiindexData, setfgiindexData] = useState([]);\n  const [fgikeyData, setfgikeyData] = useState([])\n  const [fgivalueData, setfgivalueData] = useState([]);\n  let count = 0;\n  useEffect(() => {\n    // Update the document title using the browser API\n    Promise.all([\n      api.post('marketMBI', { \"date\": new Date() }),\n      api.post('marketFGI', { \"date\": new Date() }),\n      api.post('marketChartMBI', { \"date\": new Date(2020, 1, 1) }),\n      api.post('marketChartFGI', { \"date\": new Date(2020, 1, 1) }),\n      api.post('marketChartIndex', { \"date\": new Date(2020, 1, 1) })])\n      .then(([mbiRes, fgiRes, mbiChartRes, fgiChartRes, compValueRes]) => {\n        if (mbiRes) {\n          const mbiData = mbiRes.data.data;\n          setCurrent(mbiData.current_date);\n          setClose(mbiData.previous_close);\n          setWeekago(mbiData.week_ago);\n          setMothago(mbiData.month_ago);\n          setUpdateDate(mbiData.last_update);\n\n          const fgiData = fgiRes.data.data;\n          setfgiCurrent(fgiData.current_date);\n          setFgiClose(fgiData.previous_close);\n          setFgiWeek(fgiData.week_ago);\n          setFgiMoth(fgiData.month_ago);\n          setFgiUpdate(fgiData.last_update);\n\n        }\n\n        if (mbiChartRes && mbiChartRes.data && mbiChartRes.data.data) {\n          let key = [];\n          const total =  mbiChartRes.data.data.length;\n          const step = Math.round(total/7)\n          let mbiChartData = mbiChartRes.data.data.map((it, index) => {\n            const x = new Date(it[0] * 1000).getTime();\n            const y = it[1]*1;\n            if (index % step == 0) {\n              key.push(x)\n            }\n            return { x, y }\n          });\n          setindexData(mbiChartData);\n          setkeyData(key);\n        }\n\n        if (fgiChartRes && fgiChartRes.data && fgiChartRes.data.data) {\n          let key = [];\n          const total =  fgiChartRes.data.data.length;\n          const step = Math.round(total/7)\n          let fgiChartData = fgiChartRes.data.data.map((it, index) => {\n            const x = new Date(it[0] * 1000).getTime();\n            const y = it[1]*1;\n            if (index % step == 0) {\n              key.push(x)\n            }\n            return { x, y }\n          });\n          setfgiindexData(fgiChartData);\n          setfgikeyData(key);\n        }\n\n        if (compValueRes && compValueRes.data && compValueRes.data.data) {\n          let valueData = compValueRes.data.data.map((it, index) => {\n            const x = it[0] * 1000;\n            const y = it[1]*1;\n            return { x, y }\n          });\n\n          setvalueData(valueData);\n        }\n      });\n  }, [count]);\n\n  return <Container className=\"market-page\">\n    <Row className=\"mt-5\">\n      <Col md=\"6\" className=\"mbi-info\">\n        <p className=\"cycle m-0\">chu ky 1-2 tháng</p>\n        <p className=\"title\">Market Breadth Index (MBI)</p>\n        <p className=\"description\">What emotion is driving the market now?</p>\n        <p className=\"market-num\">\n          <MBINum point={current.value}></MBINum>\n          <span className=\"mbi-status\">Now: <b>{current.label}</b></span>\n        </p>\n        <div className=\"mbi-total-status mb-3\">\n          <div className=\"status-2\">\n            <MBINum point={close.value}></MBINum>\n            <span className=\"mbi-status\">Previous Close: <b>{close.label}</b></span>\n          </div>\n          <div className=\"status-2\">\n            <MBINum point={weekago.value}></MBINum>\n            <span className=\"mbi-status\">1 Week Ago: <b>{weekago.label}</b></span>\n          </div>\n          <div className=\"status-2\">\n            <MBINum point={mothago.value}></MBINum>\n            <span className=\"mbi-status\">1 Moth Ago: <b>{mothago.label}</b></span>\n          </div>\n        </div>\n        <p className=\"last-update\">Last updated &nbsp;\n          <Moment format=\"MMM D \\at H:mma\">\n            {updateDate}\n          </Moment>\n        </p>\n      </Col>\n      <Col md=\"6\">\n        <Artboard point={current.value} updateDate={current.date}></Artboard>\n      </Col>\n    </Row>\n\n    <Row className=\"chart\">\n      <p className=\"chart-title\">Market Breadth Index (MBI) vs. VNindex</p>\n      <p className=\"chart-desc\">\n        <span className=\"value-line mr-4\">S&P 500</span>\n        <span className=\"index-line\">Market Breadth Index</span>\n      </p>\n      <MarketChart indexData={indexData} valueData={valueData} keys={keyData}></MarketChart>\n      <p className=\"chart-source\">Source: CNN (Market Breadth Index)</p>\n    </Row>\n\n    <Row className=\"mt-5\">\n      <Col md=\"6\" className=\"mbi-info\">\n        <p className=\"cycle m-0\">chu ky 2-4 tháng</p>\n        <p className=\"title\">Fear & Greed Index (FGI)</p>\n        <p className=\"description\">What emotion is driving the market now?</p>\n        <p className=\"market-num\">\n          <MBINum point={fgiCurrent.value}></MBINum>\n          <span className=\"mbi-status\">Now: <b>{fgiCurrent.label}</b></span>\n        </p>\n        <div className=\"mbi-total-status mb-3\">\n          <div className=\"status-2\">\n            <MBINum point={fgiClose.value}></MBINum>\n            <span className=\"mbi-status\">Previous Close: <b>{fgiClose.label}</b></span>\n          </div>\n          <div className=\"status-2\">\n            <MBINum point={fgiWeek.value}></MBINum>\n            <span className=\"mbi-status\">1 Week Ago: <b>{fgiWeek.label}</b></span>\n          </div>\n          <div className=\"status-2\">\n            <MBINum point={fgiMoth.value}></MBINum>\n            <span className=\"mbi-status\">1 Moth Ago: <b>{fgiMoth.label}</b></span>\n          </div>\n        </div>\n        <p className=\"last-update\">Last updated &nbsp;\n          <Moment format=\"MMM D \\at H:mma\">\n            {fgiUpdate}\n          </Moment>\n        </p>\n      </Col>\n      <Col md=\"6\">\n        <Artboard point={fgiCurrent.value} updateDate={fgiCurrent.date}></Artboard>\n      </Col>\n    </Row>\n    <Row className=\"chart\">\n      <p className=\"chart-title\">Fear & Greed Index (FGI) vs. VNindex</p>\n      <p className=\"chart-desc\">\n        <span className=\"value-line mr-4\">S&P 500</span>\n        <span className=\"index-line\">Fear & Greed Index</span>\n      </p>\n      <MarketChart indexData={fgiindexData} keys={fgikeyData} valueData={valueData}></MarketChart>\n      <p className=\"chart-source\">Source: CNN (Fear & Greed Index)</p>\n    </Row>\n  </Container>\n};\n\nexport default Market;\n"],"sourceRoot":""}